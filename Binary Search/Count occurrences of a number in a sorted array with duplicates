class Solution {
public:
    int firstOccurence(vector<int>& nums,int n , int x){
       int low =0, high = n-1, first=-1;
       while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==x){
                first = mid;
                high = mid-1;
            } else if(nums[mid]>x){
                high = mid-1;
            } else {
                low = mid+1;
            }
       }
       return first;
    }

    int lastOccurence(vector<int>& nums,int n , int x){
       int low =0, high = n-1, last=-1;
       while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==x){
                last = mid;
                low = mid+1;
            } else if(nums[mid]>x){
                high = mid-1;
            } else {
                low = mid+1;
            }
       }
       return last;
    }

    vector<int> searchRange(vector<int>& nums, int x) {
       int n = nums.size();
       int first = firstOccurence(nums,n,x);
       int second = lastOccurence(nums,n,x);
       return {first,second};
    }

    int countOccurrences(const vector<int>& arr, int target) {
        vector<int> temp = arr;
        vector<int> ans = searchRange(temp,target);
        if(ans[0]==-1) return 0;
        return ans[1] - ans[0] + 1;
    }
};
