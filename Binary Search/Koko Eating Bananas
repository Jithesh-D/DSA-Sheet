class Solution {
public:

    int maxofarr(vector<int> arr,int size){
        int maxVal = arr[0];
        for(int i=1;i<size;i++){
         if(arr[i]>maxVal){
            maxVal = arr[i];
         }
        }
        return maxVal;
    }

   long long reqTime(vector<int> arr,int size,long long ele){
        long long totalTime=0;
           for(int i=0;i<size;i++){
            totalTime += ceil((double)arr[i]/ele); 
        }
      return totalTime;
    }

  int minEatingSpeed(vector<int>& piles, int h) {
    int n = piles.size();
    int low=1;
    int high = maxofarr(piles,n);
    int ans=0; 
    while(low<=high){
        int mid = (low+high)/2;
         long long totalTime = reqTime(piles,n,mid);
        
        if(totalTime <= h){
          ans = mid;
          high = mid-1;
        }else{
            low = mid+1;
        }
    }
   return ans;
  }
};

    
    // int minEatingSpeed(vector<int>& piles, int h) {
    //     int n = piles.size();
    //     int max = maxofarr(piles,n);
    //     int ans =0;
    //     for(int i=1;i<=max;i++){
    //        int totalTime = reqTime(piles,n,i);
    //        if(totalTime <= h){
    //           return i;
    //        }
    //     }
    //     return -1;
        
    // }
// };
