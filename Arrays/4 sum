// class Solution {
// public:
//     vector<vector<int>> fourSum(vector<int>& nums, int target) {
//         int n = nums.size();
//         sort(nums.begin(),nums.end());
//         vector<vector<int>> ans;
//         for(int i=0;i<n;i++){
//             if(i>0 && nums[i] == nums[i-1]) continue;
//             for(int j=i+1;j<n;j++){
//                 if(j > i+1 &&  nums[j]== nums[j-1]) continue;
//                 int k = j+1;
//                 int l = n-1;
                
//                  while(k<l){
//                     long long sum = (long long)nums[i]+nums[j]+ nums[k]+nums[l];
//                     if(sum == target){
//                        vector<int> temp = {nums[i],nums[j],nums[k],nums[l]};
//                        ans.push_back(temp);
//                        k++; l--;
//                        while(k<l && nums[k]==nums[k-1]) k++;
//                        while(k<l && nums[l]==nums[l-1]) l--;

//                     }else if(sum<target){
//                         k++;
//                     }else{
//                         l--;
//                     }

//                  }
//             }
//         }
//         return ans;
//     }
// };

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> ans;
        if (n < 4) return ans;

        sort(nums.begin(), nums.end());
        long long T = (long long) target;

        for (int i = 0; i < n - 3; ++i) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            // Prune using min/max possible sums for i
            long long min1 = (long long)nums[i] + nums[i+1] + nums[i+2] + nums[i+3];
            if (min1 > T) break;
            long long max1 = (long long)nums[i] + nums[n-1] + nums[n-2] + nums[n-3];
            if (max1 < T) continue;

            for (int j = i + 1; j < n - 2; ++j) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;

                // Prune using min/max possible sums for j
                long long min2 = (long long)nums[i] + nums[j] + nums[j+1] + nums[j+2];
                if (min2 > T) break;
                long long max2 = (long long)nums[i] + nums[j] + nums[n-1] + nums[n-2];
                if (max2 < T) continue;

                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    long long sum = (long long)nums[i] + nums[j] + nums[k] + nums[l];
                    if (sum == T) {
                        ans.push_back({nums[i], nums[j], nums[k], nums[l]});
                        ++k; --l;
                        // skip duplicates correctly:
                        while (k < l && nums[k] == nums[k - 1]) ++k;
                        while (k < l && nums[l] == nums[l + 1]) --l;
                    } else if (sum < T) {
                        ++k;
                    } else {
                        --l;
                    }
                }
            }
        }
        return ans;
    }
};
