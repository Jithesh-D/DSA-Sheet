/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int* result = (int*)malloc(2*sizeof(int));
    for(int i=0;i<numsSize;i++){
        for(int j=i+1;j<numsSize;j++){
            if(nums[i] + nums[j]==target){
            result[0]=i;
            result[1]=j;
            }
        }
    }
    *returnSize=2;
    return result;

//optimal 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //optimal Approach
       map <int,int> mpp;
       int n = nums.size();
       for(int i=0;i<n;i++){
         int requiredVal = target - nums[i];
         if(mpp.find(requiredVal) != mpp.end()){
            return {mpp[requiredVal],i};
         } 
         mpp[nums[i]]=i;
       } 
     return {-1,-1};
    }
};
