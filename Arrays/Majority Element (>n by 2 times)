class Solution {
public:
    int majorityElement(vector<int>& nums) {

// Moore's voting algo

int ele;
int count=0;
for(int i=0;i<nums.size();i++){
    if(count==0){
         ele = nums[i];
        count=1;
    }else if(nums[i]==ele){
        count++;
    }else{
        count--;
    }
}
// It's done only if there is if question specifies that there can be major ele or not 

// int cnt1=0;
// for(int i=0;i<nums.size();i++){
//     if(nums[i]==ele){
//       cnt1++;
//     }
    
// }
// int val=-1;
// if(cnt1> (nums.size()/2)){
//  val = ele;
// }

return ele;
    }
};


//Better TC = N + nlogn , sc = o(logn)
    //   int value=0;
    //   map <int,int> mpp;
    //   for(int i=0;i<nums.size();i++){
    //      mpp[nums[i]]++;
    //   }
    //   for (auto it : mpp){
    //     if(it.second > (nums.size()/2)){
    //          value = it.first; 
    //     }
    //           }
    //    return value;


// Brute - TC = O(n^2), sc = O(1)
        // int i=0;
        // for (;i<nums.size();i++){
        //     int count =0;
        //     for(int j=0;j<nums.size();j++){
        //         if(nums[i]==nums[j]){
        //             count++;
        //         }
        //     }
        //     if(count >(nums.size()/2)){
        //          break;
                  
        //     }
        // }
        // return nums[i];
//     }
// };
