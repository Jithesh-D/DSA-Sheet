class Solution {
  public:
    vector<int> findTwoElement(vector<int>& arr) {
        //optimal TC = O(n),SC =O(1) 
        long long n = arr.size();
        long long sumN = n*(n+1)/2;
        long long sum2N = n*(n+1)*(2*n+1)/6;
        long long sum=0, sum2=0;
        for(int i=0;i<n;i++){
             sum += arr[i];
        
            sum2 += (long long)arr[i]* arr[i];
        }
        long long val1 = sumN- sum;
        long long  val2 = sum2N - sum2;
        val2 = val2/val1;
        long long missing = (val1+val2)/2;
        long long repeating= missing - val1;
        return{(int)repeating,(int)missing};
    }

};  
        // int n = arr.size();
        // vector<int>hasharr(n+1,0);
        // int missing=-1,repeating=-1;
        // for(int i=0;i<n;i++){
        //     hasharr[arr[i]]++;
        // }
        // for(int i=1;i<=n;i++){
        //     if(hasharr[i] == 2){
        //         repeating = i;
        //     }
        //     if(hasharr[i]==0){
        //         missing = i;
        //     }
        //     if(missing !=-1 && repeating !=-1){
        //         break;
        //     }
        // }
        // return{repeating,missing};
  
        
        
    //     int n = arr.size();
    //     int repeating =-1;
    //     int missing =-1;
        
    //   for(int i=1;i<=n;i++){
    //       int count=0;
    //       for(int j=0;j<n;j++){
    //           if(arr[j]==i){
    //               count++;
    //           }
    //       }
    //       if(count==2){
    //         repeating=i; 
    //       }
    //       if(count ==0){
    //           missing = i;
    //       }
          
    //       if(repeating!=-1 && missing!=-1){
    //           break;
    //       }
    //   }
    
    // return {repeating,missing};
