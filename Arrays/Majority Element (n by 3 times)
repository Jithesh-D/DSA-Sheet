class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
   
   //Optimal : TC = O(N) , SC = O(2) -O(1)
    int el1 = 0, el2 = 1;
    int c1 = 0, c2 = 0;
    int n = nums.size();
    vector <int> ans;
    for (int i = 0; i < nums.size(); i++) {
        if (nums[i] == el1) {
            c1++;
        } else if (nums[i] == el2) {
            c2++;
        } else if (c1 == 0) {
            el1 = nums[i];
            c1 = 1;
        } else if (c2 == 0) {
            el2 = nums[i];
            c2 = 1;
        } else {
            c1--;
            c2--;
        }
    }
    c1 = 0;
    c2 = 0;
    for (int i = 0; i < nums.size(); i++) {
        if (nums[i] == el1) c1++;
        else if (nums[i] == el2) c2++;
    }
    if (c1 > n / 3){
     ans.push_back(el1);
    }
    if (c2 > n / 3){
     ans.push_back(el2);
    }
    return ans;


    // Better : TC = O(N) + O(N) for worst case of map && in best case O(1) , SC = O(nlog n)
    //     int n = nums.size();
    //     map <int ,int> mpp;
    //     vector <int> ans;
    //     int Ele = n/3;
    //     for(int i=0;i<n;i++){
    //         if(ans.size()==0 || ans[0]!=nums[i]){
    //         mpp[nums[i]]++;
    //         if(mpp[nums[i]] > Ele){
    //             ans.push_back(nums[i]);
    //         }
    //         if(ans.size()==2){
    //             break;
    //         }
    //     }
    //     }
    //     return ans;

    //Brute : TC = O(n^2), SC = O(1) 
        // int n = nums.size();
        // int El = n/3;
        // int count;
        // vector <int> ls;
        // for(int i=0;i<n;i++){
        //   if(ls.size()==0 || ls[0]!=nums[i]){
        //     count=0;
        //     for(int j=0;j<n;j++){
        //         if(nums[i]==nums[j]){
        //             count++;
        //         }
             
        //     }
        //        if(count > El){
        //         ls.push_back(nums[i]);
        //        }
        //     if (ls.size()==2){
        //         break;
        //     }
        //   }
        // }
        // return ls;
    }
};
